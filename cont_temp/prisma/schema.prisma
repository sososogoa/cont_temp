generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자
model User {
  user_id            Int           @id @default(autoincrement())
  email              String        @unique
  name               String
  phone_number       String
  role               Role          @default(user)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  social_provider    String
  social_id          String
  authorization_code String
  access_token       String
  RoomReserve        RoomReserve[]
  RoomReview         RoomReview[]
}

// 사용자 역할 ENUM
enum Role {
  user
  admin
}

// 호실
model Room {
  room_id     Int           @id @default(autoincrement())
  name        String
  description String
  capacity    Int
  min_time    Int
  max_time    Int
  price       Int
  image_url   String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  RoomOption  RoomOption[]
  RoomReserve RoomReserve[]
  RoomReview  RoomReview[]
}

model OptionItem {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Int?
  is_required Boolean
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  RoomOption  RoomOption[]
}

model RoomOption {
  id             Int        @id @default(autoincrement())
  room           Room       @relation(fields: [room_id], references: [room_id])
  room_id        Int
  optionItem     OptionItem @relation(fields: [option_item_id], references: [id])
  option_item_id Int
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
}

// 예약
model RoomReserve {
  reserve_id    Int               @id @default(autoincrement())
  user_id       Int
  room_id       Int
  temp_password Int
  start_time    DateTime
  end_time      DateTime
  purpose       String
  status        ReservationStatus
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
  room Room @relation(fields: [room_id], references: [room_id])
}

// 예약 상태 ENUM
enum ReservationStatus {
  pending
  approved
  rejected
  cancelled
}

// 파일 저장소
model FileStorage {
  file_id      Int      @id @default(autoincrement())
  name         String
  description  String?
  path         String
  size         Int?
  format       String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  context_type String
  context_id   Int
}

// 리뷰
model RoomReview {
  id         Int      @id @default(autoincrement())
  user_id    Int
  room_id    Int
  rating     Int
  comment    String
  image_url  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
  room Room @relation(fields: [room_id], references: [room_id])
}
